 E. F. Codd's paper A Relational Model of Data for Large Shared Data Banks contains a good deal of interesting insights, though personally the most interesting element of the paper is its implicit implementation of Black Box theory for seemingly the first time in the context of a data bank application. Black Box theory defines a contained system the internal workings of which either cannot or need not be known to the user. Black Box systems are defined exclusively by their input and output, their internal workings being irrelevant so long as input and output are reliable.

In section two of E. F. Codd's paper, Operations on Relations, the author envisions a set of four operations which act on and deliver data to the user, as well as a fifth that is more so a principle than an operation. These operations, while in this paper specific to Codd's novel concept of a relational database, implicitly implement the Black Box theory in the way that they are defined. Given the four defined operations (projection, join, composition, and restriction), in addition to operations inherent to data sets (add, delete, etc.), users are able to reliably operate on large data banks without knowing the underlying structure and implementation of the data bank itself. This is novel in its abstraction of the data's format from the operation's definition, which would go on to form the basis for SQL's many operations. Through normalization and the implementation of a shared set of operations nearly any data bank could respond appropriately to input, regardless of underlying implementation. This phenomenon can be seen in the evolution of NoSQL (and other) databases and their original eschewing of SQL-style queries, subsequent implementation of SQL-like queries, and eventual near-complete adoption of true SQL.

In summary, while many of E. F. Codd's thoughts on data bank structure using the relational model is both novel and revolutionary, I feel that his greatest insights were in the definition of Black Box operations on data banks. These operations and their subsequent integration into SQL, LINQ, and other query languages, form a powerful and approachable set of common operations that users continue to use to this day regardless of the backing implementation of the data structure.